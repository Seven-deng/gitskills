// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: getscore/getscore.proto

//option go_package = "google.golang.org/grpc/examples/helloworld/helloworld";
//option java_multiple_files = true;
//option java_package = "io.grpc.examples.helloworld";
//option java_outer_classname = "HelloWorldProto";

package getscore

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The request message containing the user's name.
type CardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeMapAll    map[int64]int32 `protobuf:"bytes,1,rep,name=typeMapAll,proto3" json:"typeMapAll,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TilesNum      int32           `protobuf:"varint,2,opt,name=tilesNum,proto3" json:"tilesNum,omitempty"`
	Discards      []int64         `protobuf:"varint,3,rep,packed,name=discards,proto3" json:"discards,omitempty"`
	HandCards     []int64         `protobuf:"varint,4,rep,packed,name=handCards,proto3" json:"handCards,omitempty"`
	SurplusCards  []int64         `protobuf:"varint,5,rep,packed,name=surplusCards,proto3" json:"surplusCards,omitempty"`
	OtherHands    []int64         `protobuf:"varint,6,rep,packed,name=otherHands,proto3" json:"otherHands,omitempty"`
	ChowCards     []int64         `protobuf:"varint,7,rep,packed,name=chowCards,proto3" json:"chowCards,omitempty"`
	PongCards     []int64         `protobuf:"varint,8,rep,packed,name=pongCards,proto3" json:"pongCards,omitempty"`
	MingKong      []int64         `protobuf:"varint,9,rep,packed,name=mingKong,proto3" json:"mingKong,omitempty"`
	AnKong        []int64         `protobuf:"varint,10,rep,packed,name=anKong,proto3" json:"anKong,omitempty"`
	IsBanker      bool            `protobuf:"varint,11,opt,name=isBanker,proto3" json:"isBanker,omitempty"`
	IsZimo        bool            `protobuf:"varint,12,opt,name=isZimo,proto3" json:"isZimo,omitempty"`
	RobKong       bool            `protobuf:"varint,13,opt,name=robKong,proto3" json:"robKong,omitempty"`
	LastOptIsKong bool            `protobuf:"varint,14,opt,name=lastOptIsKong,proto3" json:"lastOptIsKong,omitempty"`
	LastCardCpk   bool            `protobuf:"varint,15,opt,name=lastCard_cpk,json=lastCardCpk,proto3" json:"lastCard_cpk,omitempty"`
	LastCard      int64           `protobuf:"varint,16,opt,name=lastCard,proto3" json:"lastCard,omitempty"`
	TableFeng     int64           `protobuf:"varint,17,opt,name=tableFeng,proto3" json:"tableFeng,omitempty"`
	MenFeng       int64           `protobuf:"varint,18,opt,name=menFeng,proto3" json:"menFeng,omitempty"`
}

func (x *CardInfo) Reset() {
	*x = CardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_getscore_getscore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInfo) ProtoMessage() {}

func (x *CardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_getscore_getscore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInfo.ProtoReflect.Descriptor instead.
func (*CardInfo) Descriptor() ([]byte, []int) {
	return file_getscore_getscore_proto_rawDescGZIP(), []int{0}
}

func (x *CardInfo) GetTypeMapAll() map[int64]int32 {
	if x != nil {
		return x.TypeMapAll
	}
	return nil
}

func (x *CardInfo) GetTilesNum() int32 {
	if x != nil {
		return x.TilesNum
	}
	return 0
}

func (x *CardInfo) GetDiscards() []int64 {
	if x != nil {
		return x.Discards
	}
	return nil
}

func (x *CardInfo) GetHandCards() []int64 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *CardInfo) GetSurplusCards() []int64 {
	if x != nil {
		return x.SurplusCards
	}
	return nil
}

func (x *CardInfo) GetOtherHands() []int64 {
	if x != nil {
		return x.OtherHands
	}
	return nil
}

func (x *CardInfo) GetChowCards() []int64 {
	if x != nil {
		return x.ChowCards
	}
	return nil
}

func (x *CardInfo) GetPongCards() []int64 {
	if x != nil {
		return x.PongCards
	}
	return nil
}

func (x *CardInfo) GetMingKong() []int64 {
	if x != nil {
		return x.MingKong
	}
	return nil
}

func (x *CardInfo) GetAnKong() []int64 {
	if x != nil {
		return x.AnKong
	}
	return nil
}

func (x *CardInfo) GetIsBanker() bool {
	if x != nil {
		return x.IsBanker
	}
	return false
}

func (x *CardInfo) GetIsZimo() bool {
	if x != nil {
		return x.IsZimo
	}
	return false
}

func (x *CardInfo) GetRobKong() bool {
	if x != nil {
		return x.RobKong
	}
	return false
}

func (x *CardInfo) GetLastOptIsKong() bool {
	if x != nil {
		return x.LastOptIsKong
	}
	return false
}

func (x *CardInfo) GetLastCardCpk() bool {
	if x != nil {
		return x.LastCardCpk
	}
	return false
}

func (x *CardInfo) GetLastCard() int64 {
	if x != nil {
		return x.LastCard
	}
	return 0
}

func (x *CardInfo) GetTableFeng() int64 {
	if x != nil {
		return x.TableFeng
	}
	return 0
}

func (x *CardInfo) GetMenFeng() int64 {
	if x != nil {
		return x.MenFeng
	}
	return 0
}

// The response message containing the greetings
type CheckTypeScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message map[int64]int32 `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CheckTypeScore) Reset() {
	*x = CheckTypeScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_getscore_getscore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckTypeScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckTypeScore) ProtoMessage() {}

func (x *CheckTypeScore) ProtoReflect() protoreflect.Message {
	mi := &file_getscore_getscore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckTypeScore.ProtoReflect.Descriptor instead.
func (*CheckTypeScore) Descriptor() ([]byte, []int) {
	return file_getscore_getscore_proto_rawDescGZIP(), []int{1}
}

func (x *CheckTypeScore) GetMessage() map[int64]int32 {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_getscore_getscore_proto protoreflect.FileDescriptor

var file_getscore_getscore_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x65, 0x74, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x67, 0x65, 0x74, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x22, 0x82, 0x05, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x42, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x65, 0x74, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75,
	0x72, 0x70, 0x6c, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x68, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x6f, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6f, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69,
	0x6e, 0x67, 0x4b, 0x6f, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x67, 0x4b, 0x6f, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x4b, 0x6f, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6e, 0x4b, 0x6f, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x5a, 0x69, 0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x5a, 0x69,
	0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x62, 0x4b, 0x6f, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x4b, 0x6f, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x49, 0x73, 0x4b, 0x6f, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x49, 0x73, 0x4b, 0x6f,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x70, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x43, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x65, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x65, 0x6e, 0x46, 0x65, 0x6e, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x65, 0x74, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3a, 0x0a, 0x0c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x48, 0x0a, 0x07, 0x48, 0x75, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x2e, 0x67, 0x65, 0x74, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x67, 0x65, 0x74, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_getscore_getscore_proto_rawDescOnce sync.Once
	file_getscore_getscore_proto_rawDescData = file_getscore_getscore_proto_rawDesc
)

func file_getscore_getscore_proto_rawDescGZIP() []byte {
	file_getscore_getscore_proto_rawDescOnce.Do(func() {
		file_getscore_getscore_proto_rawDescData = protoimpl.X.CompressGZIP(file_getscore_getscore_proto_rawDescData)
	})
	return file_getscore_getscore_proto_rawDescData
}

var file_getscore_getscore_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_getscore_getscore_proto_goTypes = []interface{}{
	(*CardInfo)(nil),       // 0: getscore.CardInfo
	(*CheckTypeScore)(nil), // 1: getscore.checkTypeScore
	nil,                    // 2: getscore.CardInfo.TypeMapAllEntry
	nil,                    // 3: getscore.checkTypeScore.MessageEntry
}
var file_getscore_getscore_proto_depIdxs = []int32{
	2, // 0: getscore.CardInfo.typeMapAll:type_name -> getscore.CardInfo.TypeMapAllEntry
	3, // 1: getscore.checkTypeScore.message:type_name -> getscore.checkTypeScore.MessageEntry
	0, // 2: getscore.HuScore.CheckHuType:input_type -> getscore.CardInfo
	1, // 3: getscore.HuScore.CheckHuType:output_type -> getscore.checkTypeScore
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_getscore_getscore_proto_init() }
func file_getscore_getscore_proto_init() {
	if File_getscore_getscore_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_getscore_getscore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_getscore_getscore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckTypeScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_getscore_getscore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_getscore_getscore_proto_goTypes,
		DependencyIndexes: file_getscore_getscore_proto_depIdxs,
		MessageInfos:      file_getscore_getscore_proto_msgTypes,
	}.Build()
	File_getscore_getscore_proto = out.File
	file_getscore_getscore_proto_rawDesc = nil
	file_getscore_getscore_proto_goTypes = nil
	file_getscore_getscore_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HuScoreClient is the client API for HuScore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HuScoreClient interface {
	// Sends a greeting
	CheckHuType(ctx context.Context, in *CardInfo, opts ...grpc.CallOption) (*CheckTypeScore, error)
}

type huScoreClient struct {
	cc grpc.ClientConnInterface
}

func NewHuScoreClient(cc grpc.ClientConnInterface) HuScoreClient {
	return &huScoreClient{cc}
}

func (c *huScoreClient) CheckHuType(ctx context.Context, in *CardInfo, opts ...grpc.CallOption) (*CheckTypeScore, error) {
	out := new(CheckTypeScore)
	err := c.cc.Invoke(ctx, "/getscore.HuScore/CheckHuType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HuScoreServer is the server API for HuScore service.
type HuScoreServer interface {
	// Sends a greeting
	CheckHuType(context.Context, *CardInfo) (*CheckTypeScore, error)
}

// UnimplementedHuScoreServer can be embedded to have forward compatible implementations.
type UnimplementedHuScoreServer struct {
}

func (*UnimplementedHuScoreServer) CheckHuType(context.Context, *CardInfo) (*CheckTypeScore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHuType not implemented")
}

func RegisterHuScoreServer(s *grpc.Server, srv HuScoreServer) {
	s.RegisterService(&_HuScore_serviceDesc, srv)
}

func _HuScore_CheckHuType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuScoreServer).CheckHuType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/getscore.HuScore/CheckHuType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuScoreServer).CheckHuType(ctx, req.(*CardInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _HuScore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "getscore.HuScore",
	HandlerType: (*HuScoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHuType",
			Handler:    _HuScore_CheckHuType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getscore/getscore.proto",
}
